import jsCookie from 'js-cookie';
import { logUsage } from 'owa-analytics';
import type Token from 'owa-service/lib/contract/Token';
import getClientAccessTokenRequest from 'owa-service/lib/factory/getClientAccessTokenRequest';
import getClientAccessTokenOperation from 'owa-service/lib/operation/getClientAccessTokenOperation';
import { getJsonRequestHeader } from 'owa-service/lib/ServiceRequestUtils';

const BrowserCookies: Cookies.CookiesStatic = jsCookie;

const LTI_TOKEN_REQUEST_FAILURE_DATAPOINT = 'GetConnectorsLTITokenFailure';
const LTI_TOKEN_REQUEST_EXCEPTION_DATAPOINT = 'GetConnectorsLTITokenException';
const LTI_TOKEN_REQUEST_NULL_DATAPOINT = 'GetConnectorsLTITokenNull';

const LTI_TOKEN_COOKIE_NAME = 'ConnectorsLtiToken';
const CONNECTORS_LTI_APP_ID = '40B852DF-9693-420D-AA7D-10072C9CE077';

// For connectors token TTL margin of error to account for network latency, etc. In minutes.
// Connectors token generated by EWS has TTL of 14 minutes.
const TTL_MARGIN_OF_ERROR = 5;

// The cached token
let cachedToken: Token;
let cacheTime: number;

// The singleton connector token promise
let connectorTokenPromise: Promise<string>;

export default async function getConnectorsLTIToken(): Promise<string> {
    let connectorToken = validateAndGetCachedToken();
    if (!connectorToken) {
        connectorToken = await getConnectorTokenPromise();
    }

    return connectorToken;
}

function getConnectorTokenPromise(): Promise<string> {
    // When there isn't a connectorTokenPromise, create one first
    // connectorTokenPromise will be reset to null upon the token being refreshed
    if (!connectorTokenPromise) {
        connectorTokenPromise = new Promise<string>((resolve, reject) => {
            const request = {
                Header: getJsonRequestHeader(),
                Body: getClientAccessTokenRequest({
                    TokenRequests: [
                        {
                            __type: 'TokenRequest:#Exchange',
                            Id: CONNECTORS_LTI_APP_ID,
                            TokenType: 'Connectors',
                        },
                    ],
                }),
            };
            getClientAccessTokenOperation(request)
                .then(results => {
                    connectorTokenPromise = null;
                    if (
                        results &&
                        results.Body.ResponseMessages.Items[0].ResponseClass === 'Success'
                    ) {
                        // Update the token in cache
                        cachedToken = <Token>(<any>results.Body.ResponseMessages.Items[0]).Token;
                        cacheTime = Date.now();
                        setLTIAuthCookie(cachedToken.TokenValue);
                        resolve(cachedToken.TokenValue);
                    } else {
                        logLTITokenRequestFailureAndInvalidateToken(
                            LTI_TOKEN_REQUEST_FAILURE_DATAPOINT
                        );
                        reject(new Error('getClientAuthToken failed'));
                    }
                })
                .catch(error => {
                    connectorTokenPromise = null;
                    logLTITokenRequestFailureAndInvalidateToken(
                        LTI_TOKEN_REQUEST_EXCEPTION_DATAPOINT
                    );
                    reject(new Error('getClientAuthToken exception: ' + error));
                });
        });
    }

    return connectorTokenPromise;
}

function logLTITokenRequestFailureAndInvalidateToken(datapointName: string) {
    logUsage(datapointName);
    cachedToken = undefined;
}

function validateAndGetCachedToken(): string {
    if (cachedToken) {
        const durationInMilliseconds = Date.now() - cacheTime;
        if (durationInMilliseconds < (cachedToken.TTL - TTL_MARGIN_OF_ERROR) * 1000 * 60) {
            return cachedToken.TokenValue;
        }
    }
    return null;
}

function setLTIAuthCookie(tokenValue: string) {
    if (tokenValue) {
        BrowserCookies.set(LTI_TOKEN_COOKIE_NAME, tokenValue, { path: '/actions/' });
    } else {
        logLTITokenRequestFailureAndInvalidateToken(LTI_TOKEN_REQUEST_NULL_DATAPOINT);
        throw new Error('getClientAuthToken null');
    }
}
